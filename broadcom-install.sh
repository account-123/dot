#!/usr/bin/env bash

# ###################################################################
# Broadcom Wi-Fi Driver Installer for Arch Linux & Derivatives
#
# This script automates the installation of the broadcom-wl-dkms driver
# and automatically detects and installs the necessary linux-headers
# for all currently installed kernels.
#
# It is designed for systems using the 'pacman' package manager.
# ###################################################################

# --- Configuration & Colors ---
set -e  # Exit immediately if a command exits with a non-zero status.
C_BLUE="\e[1;34m"
C_GREEN="\e[1;32m"
C_RED="\e[1;31m"
C_YELLOW="\e[1;33m"
C_RESET="\e[0m"

# --- Helper Functions ---
info() {
    echo -e "${C_BLUE}INFO:${C_RESET} $1"
}

success() {
    echo -e "${C_GREEN}SUCCESS:${C_RESET} $1"
}

warn() {
    echo -e "${C_YELLOW}WARNING:${C_RESET} $1"
}

error() {
    echo -e "${C_RED}ERROR:${C_RESET} $1" >&2
    exit 1
}

# --- Main Script ---

# 1. Check for Root Privileges
info "Checking for root privileges..."
if [[ $EUID -ne 0 ]]; then
   error "This script must be run as root. Please use 'sudo ./script_name.sh'"
fi
success "Running with root privileges."

# 2. Check for pacman
info "Verifying that 'pacman' is the package manager..."
if ! command -v pacman &> /dev/null; then
    error "This script is designed for Arch Linux and its derivatives, which use 'pacman'. Aborting."
fi
success "Pacman found."

# 3. Detect Installed Kernels and Required Headers (Robust Method)
info "Detecting installed kernels to determine which headers are needed..."
# This new method directly parses filenames in /boot, which is more reliable.
headers_to_install=()
detected_kernel_names=()
for kernel_image in /boot/vmlinuz-*; do
    # Continue if the glob doesn't match any files
    [ -f "$kernel_image" ] || continue
    
    # From a filename like '/boot/vmlinuz-linux-lts', extract 'linux-lts'
    kernel_name=$(basename "$kernel_image" | sed 's/^vmlinuz-//')
    
    detected_kernel_names+=("$kernel_name")
    headers_to_install+=("${kernel_name}-headers")
done

if [ ${#headers_to_install[@]} -eq 0 ]; then
    error "Could not detect any kernel images in /boot (e.g., /boot/vmlinuz-linux). Cannot proceed."
fi

# Remove potential duplicates
detected_kernel_names=($(printf "%s\n" "${detected_kernel_names[@]}" | sort -u))
headers_to_install=($(printf "%s\n" "${headers_to_install[@]}" | sort -u))


info "Detected kernel(s): ${C_YELLOW}${detected_kernel_names[*]}${C_RESET}"
info "Corresponding header package(s) needed: ${C_YELLOW}${headers_to_install[*]}${C_RESET}"

# 4. Prepare Package List and Ask for Confirmation
# We use broadcom-wl-dkms because it automatically rebuilds the driver
# when you update your kernel, which is much more reliable than broadcom-wl.
packages_to_install=("broadcom-wl-dkms")
packages_to_install+=("${headers_to_install[@]}")

echo # Add a newline for readability
warn "This script will attempt to install or update the following packages:"
for pkg in "${packages_to_install[@]}"; do
    echo -e "  - ${C_YELLOW}${pkg}${C_RESET}"
done
echo # Add a newline

# Ask for user confirmation
read -p "Do you want to proceed with the installation? (y/N) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    info "Installation cancelled by user."
    exit 0
fi

# 5. Run Installation
info "Starting installation with pacman. This will refresh repositories and may take a moment..."
# We use -Syu to ensure the system is up-to-date before installing kernel modules.
# --needed prevents re-installing packages that are already present and up-to-date.
if pacman -Syu --needed "${packages_to_install[@]}"; then
    success "Pacman has successfully completed the installation."
else
    error "Pacman encountered an error. Please check the output above."
fi

# 6. Blacklist Conflicting Modules
info "Blacklisting conflicting kernel modules (b43, ssb, bcma) to ensure 'wl' is used."
BLACKLIST_FILE="/etc/modprobe.d/broadcom-blacklist.conf"
cat > "$BLACKLIST_FILE" <<EOF
# This file was automatically generated by the Broadcom installer script.
# It prevents native drivers from loading so that 'wl' can be used.
blacklist b43
blacklist b43legacy
blacklist ssb
blacklist bcma
EOF
success "Created blacklist file at ${BLACKLIST_FILE}"

# 7. Final Instructions
echo
success "All steps completed!"
info "Attempting to load the new 'wl' driver now..."
modprobe wl || warn "Could not load the 'wl' module immediately. A reboot will solve this."

echo
warn "A REBOOT IS STRONGLY RECOMMENDED to ensure all changes take effect and the new driver is loaded correctly."
info "After rebooting, your Broadcom Wi-Fi card should be operational."

